@page "/product"
@inject IProductRepository _productRepository
@inject IJSRuntime _jsRuntime
@inject IFileUpload _fileUpload
@inject NavigationManager _navigationManager
@*@attribute [Authorize]*@

<_DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
<div class="row mt-4">
	<div class="col-6">
		<h4 class="cardcard-title text-primary">Product List</h4>
	</div>
	<div class="col-2 offset-2">
		<a href="product/create" class="btn btn-primary form-control">Add New Product</a>
	</div>
</div>
<div class="col-10">
	@if (Products.Any())
	{
			<table class="table table-bordered">
			<thead>
				<tr>
					<th>Name</th>
					<th>Shop Favorites</th>
					<th>Customer Favorites</th>
					<th>Category</th>
					<th>Action</th>
				</tr>
			</thead>
			<tbody>
				@foreach(var prod in Products)
				{
					<tr>
						<td>@prod.Name</td>
						<td>
							<input type="checkbox" disabled checked="@prod.ShopFavorites">
						</td>
						<td>
							<input type="checkbox" disabled checked="@prod.CustomerFavorites">
						</td>
						<td>
							@prod.Category.Name
						</td>
						<td>
							<NavLink href="@($"product/edit/{prod.Id}")" class="btn btn-primary mx-1">Edit</NavLink>
							<NavLink href="@($"product/productprice/{prod.Id}")" class="btn btn-success mx-1">Price</NavLink>
							<button class="btn btn-danger" @onclick="()=>HandleDelete(prod.Id)">Delete</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	}
	else
	{
		if(IsLoading)
		{
			<div class="text-center">
				<img src="/images/loader.gif">
			</div>
		}
		else
		{
			<p>No record found</p>
		}
	}
</div>

@code {
	private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
	private bool IsLoading { get; set; }
	private int DeleteProductId { get; set; } = 0;

	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationState { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationState;
		if (!authState.User.Identity.IsAuthenticated)
		{
			var uri = new Uri(_navigationManager.Uri);
			_navigationManager.NavigateTo($"/identity/account/login?returnUrl={uri.LocalPath}", forceLoad: true); // go directly to login page if not logged in
		}
	}


	protected override async Task OnAfterRenderAsync(bool firstRender) // if we use on initialized, there will be some delay in that case
	{
		if (firstRender)
		{
			await LoadCategories();
		}

	}
	private async Task LoadCategories()
	{
		IsLoading = true;
		StateHasChanged();
		Products = await _productRepository.GetAll();
		IsLoading = false;
		StateHasChanged(); // invoke state has changed. this will notify the application that the state has changed and need to do some rendering
	}

	private async Task HandleDelete(int id)
	{
		DeleteProductId = id;
		await _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
	}
	public async Task ConfirmDelete_Click(bool isConfirmed)
	{
		if(isConfirmed && DeleteProductId != 0)
		{
			// delete
			ProductDTO product = await _productRepository.Get(DeleteProductId);
			if (!product.ImageUrl.Contains("default.png"))
			{
				_fileUpload.DeleteFile(product.ImageUrl);
			}
			await _productRepository.Delete(DeleteProductId);
			//await _jsRuntime.ToastrSuccess("Product Deleted Successfully");
			await LoadCategories();
			await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
		}
	}
}
